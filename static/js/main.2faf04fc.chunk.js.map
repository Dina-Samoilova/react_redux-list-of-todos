{"version":3,"sources":["api/api.ts","store/index.ts","components/Start.tsx","components/TodoList/TodoList.tsx","components/SearchPanel/SearchPanel.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["request","url","method","fetch","then","response","ok","json","Promise","reject","Error","status","statusText","getAllTodos","getUser","userId","deleteTodo","todoId","UPDATE_TODOS","USER_SET","FILTER","QUERY_SET","RANDOMIZE","actions","startLoading","dispatch","a","allTodos","updateTodos","loadUser","user","setUser","id","name","username","email","phone","todos","type","filter","setQuery","query","randomize","clear","isRandom","state","random","getStateUser","getTodos","getQuery","getFilter","initialState","store","createStore","action","toLowerCase","composeWithDevTools","applyMiddleware","thunk","Start","title","useDispatch","className","onClick","TodoList","useSelector","visibleTodos","useMemo","filteredTodos","todo","includes","newTodos","completed","map","value","sort","Math","b","length","classNames","checked","readOnly","SearchPanel","applyedQuery","useState","applyQuery","useCallback","debounce","newQuery","placeholder","onChange","event","target","CurrentUser","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2faf04fc.chunk.js","sourcesContent":["const API_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string, method?: RequestInit | undefined) => {\n  return fetch(`${API_URL}${url}`, method)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      return response.json();\n    });\n};\n\nexport function getAllTodos(): Promise<Todo[]> {\n  return request('/todos');\n}\n\nexport function getUser(userId: number): Promise<User> {\n  return request(`/users/${userId}`);\n}\n\nexport function deleteTodo(todoId: number) {\n  return request(`/todos/${todoId}`, {\n    method: 'DELETE',\n  });\n}\n","import { createStore, AnyAction, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { getAllTodos, getUser, deleteTodo } from '../api/api';\n\nconst UPDATE_TODOS = 'UPDATE_TODOS';\nconst USER_SET = 'USER_SET';\nconst FILTER = 'FILTER';\nconst QUERY_SET = 'QUERY_SET';\nconst RANDOMIZE = 'RANDOMIZE';\n\nexport const actions = {\n  startLoading: async (dispatch: typeof store.dispatch) => {\n    try {\n      const allTodos = await getAllTodos();\n\n      dispatch(actions.updateTodos(allTodos));\n    } catch {\n      dispatch(actions.updateTodos([]));\n    }\n  },\n  loadUser: (userId: number) => async (dispatch:\n  typeof store.dispatch) => {\n    try {\n      const user = await getUser(userId);\n\n      dispatch(actions.setUser(user));\n    } catch {\n      dispatch(actions.setUser({\n        id: 0,\n        name: '',\n        username: '',\n        email: '',\n        phone: '',\n      }));\n    }\n  },\n  deleteTodo: (todoId: number) => async (dispatch:\n  typeof store.dispatch) => {\n    try {\n      await deleteTodo(todoId);\n      const allTodos = await getAllTodos();\n\n      dispatch(actions.updateTodos(allTodos));\n    } catch {\n      dispatch(actions.updateTodos([]));\n    }\n  },\n  updateTodos: (todos: Todo[]) => ({ type: UPDATE_TODOS, todos }),\n  setUser: (user: User) => ({ type: USER_SET, user }),\n  filter: (filter: string) => ({ type: FILTER, filter }),\n  setQuery: (query: string) => ({ type: QUERY_SET, query }),\n  randomize: () => ({ type: RANDOMIZE }),\n  clear: (dispatch: typeof store.dispatch) => {\n    dispatch(actions.setUser({\n      id: 0,\n      name: '',\n      username: '',\n      email: '',\n      phone: '',\n    }));\n  },\n};\n\nexport const isRandom = (state: RootState) => state.random;\nexport const getStateUser = (state: RootState) => state.user;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getQuery = (state: RootState) => state.query;\nexport const getFilter = (state: RootState) => state.filter;\n\nexport type RootState = {\n  random: boolean;\n  todos: Todo[];\n  user: User;\n  query: string;\n  filter: string;\n};\n\nconst initialState: RootState = {\n  random: false,\n  todos: [],\n  user: {\n    id: 0,\n    name: '',\n    username: '',\n    email: '',\n    phone: '',\n  },\n  query: '',\n  filter: '',\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case UPDATE_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n\n    case USER_SET:\n      return {\n        ...state,\n        user: action.user,\n      };\n\n    case FILTER:\n      return {\n        ...state,\n        filter: action.filter,\n      };\n\n    case QUERY_SET:\n      return {\n        ...state,\n        query: action.query.toLowerCase(),\n      };\n\n    case RANDOMIZE:\n      return {\n        ...state,\n        random: !state.random,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../store';\nimport './Start.scss';\n\ntype Props = {\n  title: string;\n};\n\nconst Start: React.FC<Props> = ({ title }) => {\n  const dispatch = useDispatch();\n  const handleClick = () => {\n    dispatch(actions.startLoading);\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className=\"Start__button\"\n      onClick={handleClick}\n    >\n      {title}\n    </button>\n  );\n};\n\nexport default Start;\n","import React, { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport {\n  getTodos,\n  getStateUser,\n  isRandom,\n  getQuery,\n  getFilter,\n  actions,\n} from '../../store';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const todos = useSelector(getTodos);\n  const user = useSelector(getStateUser);\n  const random = useSelector(isRandom);\n  const query = useSelector(getQuery);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleUserIdClick = (id: number) => {\n    dispatch(actions.loadUser(id));\n  };\n\n  const getVisibleTodos = () => {\n    let filteredTodos = todos.filter(todo => todo.title\n      .toLowerCase().includes(query));\n\n    let newTodos = filteredTodos;\n\n    switch (filter) {\n      case 'active':\n        newTodos = filteredTodos.filter(todo => !todo.completed);\n        break;\n      case 'completed':\n        newTodos = filteredTodos.filter(todo => todo.completed);\n        break;\n      default:\n        break;\n    }\n\n    if (random) {\n      filteredTodos = newTodos\n        .map(value => ({ value, sort: Math.random() }))\n        .sort((a, b) => a.sort - b.sort)\n        .map(({ value }) => value);\n    } else {\n      filteredTodos = newTodos;\n    }\n\n    return filteredTodos;\n  };\n\n  const visibleTodos = useMemo(\n    getVisibleTodos,\n    [random, filter, query, todos],\n  );\n\n  const handleDeleteClick = (todoId: number) => {\n    dispatch(actions.deleteTodo(todoId));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      {visibleTodos.length > 0 ? (\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <div className=\"TodoList__buttons\">\n                  <button\n                    className={classNames(\n                      'TodoList__user-button button',\n                      {\n                        'TodoList__user-button--selected':\n                          todo.userId === user.id,\n                      },\n                    )}\n                    type=\"button\"\n                    onClick={() => handleUserIdClick(todo.userId)}\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    className={classNames(\n                      'TodoList__user-button button',\n                      'TodoList__user-button--delete',\n                    )}\n                    onClick={() => handleDeleteClick(todo.id)}\n                  >\n                    X\n                  </button>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <div className=\"error-message\">\n          <p>No todos was found</p>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useCallback } from 'react';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  isRandom,\n  getQuery,\n  actions,\n} from '../../store';\nimport './Search.scss';\n\nexport const SearchPanel: React.FC = () => {\n  const dispatch = useDispatch();\n  const random = useSelector(isRandom);\n  const applyedQuery = useSelector(getQuery);\n  const [query, setQuery] = useState(applyedQuery);\n\n  const applyQuery = useCallback(\n    debounce((newQuery: string) => {\n      if (newQuery) {\n        dispatch(actions.setQuery(newQuery.toLowerCase()));\n      } else {\n        dispatch(actions.setQuery(''));\n      }\n    }, 500),\n    [],\n  );\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    applyQuery(event.target.value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actions.filter(event.target.value));\n  };\n\n  const handleRandomizeClick = () => {\n    dispatch(actions.randomize());\n  };\n\n  return (\n    <>\n      <div className=\"Search-panel__form\">\n        <input\n          type=\"text\"\n          name=\"query\"\n          className=\"Search-panel__form__search\"\n          value={query}\n          placeholder=\"Type search todo\"\n          onChange={handleQueryChange}\n        />\n\n        <select\n          className=\"Search-panel__form__select\"\n          onChange={handleSelectChange}\n        >\n          <option\n            value=\"\"\n            className=\"Search-panel__form__select__option\"\n          >\n            Choose filter\n          </option>\n          <option value=\"all\">All ToDos</option>\n          <option value=\"completed\">Completed Todos</option>\n          <option value=\"active\">Active ToDos</option>\n        </select>\n\n        <button\n          type=\"button\"\n          title=\"Random todos sort\"\n          className={classNames(\n            'Search-panel__form__button',\n            { 'Search-panel__form__button--on': random },\n          )}\n          onClick={handleRandomizeClick}\n        >\n          {random ? 'Randomize On' : 'Randomize Off'}\n        </button>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getStateUser, actions } from '../../store';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getStateUser);\n  const dispatch = useDispatch();\n\n  const handleClearClick = () => {\n    dispatch(actions.clear);\n  };\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n      <div className=\"CurrentUser__clear\">\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear-button\"\n          onClick={handleClearClick}\n        >\n          Clear\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport './App.scss';\nimport './styles/general.scss';\nimport Start from './components/Start';\nimport { TodoList } from './components/TodoList';\nimport { SearchPanel } from './components/SearchPanel';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos, getStateUser } from './store';\n\nconst App = () => {\n  const todos = useSelector(getTodos);\n  const user = useSelector(getStateUser);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <h1 className=\"App__sidebar-title\">TODOS</h1>\n\n        {todos.length === 0\n          ? (<Start title=\"Start\" />)\n          : (\n            <>\n              <SearchPanel />\n              <TodoList />\n            </>\n          )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {user.id !== 0 ? (\n            <CurrentUser />\n          ) : (\n            <div className=\"App__content-container__message\">\n              <p>USER NO SELECTED</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}